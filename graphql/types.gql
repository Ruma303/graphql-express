#% SLD: Schema Definition Language

#, Commenti
    # Questo è un commento single-line
    """
        Questo è un
        commento multi-line
    """


#, Tipi
## Tipi scalari
    scalar ID
    scalar Int
    scalar Float
    scalar String
    scalar Boolean
    scalar Date

    ## Tipi oggetto
    type User {
        id: ID!
        name: String!
        email: String!
        age: Int
        role: UserRole
        interests: [String!]!
        hobbies: [String]
    }

    ## Tipi Enum
    enum UserRole {
        GUEST
        USER
        SUPERUSER
        ADMIN
    }


#, Queries

    ## Query generica
    """ type Query {
        users: [User]
    }

    query {
        users {
            id
            name
            role
        }
    } """

    ## Arguments
    type Query {
        user(id: ID!): User
        users(limit: Int = 10): [User]
        getAdmins(role: UserRole = ADMIN): [User]
    }

    query {
        user(id: "1") {
            id
            name
            email
            age
            role
            interests
            hobbies
        }
        users(limit: 5) {
            id
            name
        }
        getAdmins {
            id
            name
            role
        }
    }

    ## Nominated Queries
    query GetUser {
        user(id: "1") {
            name
            email
        }
    }


    ## Variables
    query GetUser($userId: ID!) {
        user(id: $userId0) {
            id
            name
            interests
            hobbies
        }
    }


    ## Directives
    query GetUser($userId: ID!, $includeEmail: Boolean!, $includeHobbies: Boolean!, $skipAgeIfZero: Boolean!) {
        user(id: $userId) {
            id
            name
            email @include(if: $includeEmail)
            age @skip(if: $skipAgeIfZero)
            role
            interests
            hobbies @include(if: $includeHobbies)
        }
    }


    ## Aliases
    query {
        firstUser: user(id: "1") {
            id
            name
            email
        }
        secondUser: user(id: "2") {
            id
            name
            email
        }
        allUsers: users {
            id
            name
        }
        allSuperusers: users(role: SUPERUSER) {
            id
            name
        }
    }



#, Mutation
    type Mutation {
        createUser(name: String!, email: String!, age: Int, role: UserRole, interests: [String!]!, hobbies: [String]): User
        updateUser(id: ID!, name: String, email: String, age: Int, role: UserRole, interests: [String!], hobbies: [String]): User
        deleteUser(id: ID!): User
    }


#, Tipi Subscription
    type Subscription {
        userCreated: User
        userUpdated: User
        userDeleted: User
    }

    ## Esempio Subscription Client
    subscription {
        userCreated {
            id
            name
            email
            role
        }
    }


#, Interfacce
interface Character {
  id: ID
  name: String
}
type Human implements Character {
  id: ID!
  name: String!
  age: Int
  job: String
}
type Alien implements Character {
  id: ID!
  name: String!
  age: Int
  planet: String
}

#, Union Types
    union SearchResult = Book | Author | Magazine
    type Book {
        title: String
        author: Author
    }
    type Author {
        name: String
        books: [Book]
    }
    type Magazine {
        title: String
        issueNumber: Int
    }

    type Query {
        search(query: String!): [SearchResult]
        books: [Book]
    }

    query SearchQuery {
        search(query: "example search") {
            ... on Book {
                title
                author {
                    name
                }
            }
            ... on Author {
                name
                books {
                    title
                }
            }
            ... on Magazine {
                title
                issueNumber
            }
        }
    }


#, Fragments
    fragment bookDetails on Book {
        title
        author {
            name
        }
    }

    query GetBooks {
        books {
            title
            author {
                name
            }
        }
    }

    fragment bookFragment on Book {
        title
        author {
            name
        }
    }
    fragment authorFragment on Author {
        name
        books {
            ...bookFragment
        }
    }
    fragment magazineFragment on Magazine {
        title
        issueNumber
    }
    query SearchQuery {
        search(query: "example") {
            ... on Book {
                ...bookFragment
            }
            ... on Author {
                ...authorFragment
            }
            ... on Magazine {
                ...magazineFragment
            }
        }
    }

#, Tipi Input
input UserInput {
    name: String!
    email: String!
    age: Int
    role: Role
}


#, Schema
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}